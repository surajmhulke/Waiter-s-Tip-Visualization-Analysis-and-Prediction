# -*- coding: utf-8 -*-
"""Waiterâ€™s Tip Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KjWD-lrpP1x4v3D5jb0z3w1N5RHjpOIU
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from pandas import Series, DataFrame

df1=pd.read_csv('/content/tips.csv')

df1.head()

df1.tail()

df1.columns

df1.info()

df1.isnull().sum()

df1.describe()

df1['day'].unique()

df1.nunique()

for i in df1.columns:
    print(df1[i].unique())

a=pd.DataFrame(df1['day'].value_counts())
a.reset_index(inplace=True)

plt.bar(a['index'],a['day'])

plt.bar(df1['day'].value_counts().index,df1['day'].value_counts().values)

a.plot(kind='bar',x='index',y='day',colormap='icefire')
plt.xticks(rotation=0)
plt.show()

import numpy as np
import pandas as pd
import seaborn as sb
import matplotlib.pyplot as plt

from sklearn.metrics import mean_absolute_error as mae
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.linear_model import LinearRegression
from xgboost import XGBRegressor
from sklearn.ensemble import RandomForestRegressor, AdaBoostRegressor

import warnings
warnings.filterwarnings('ignore')
plt.subplots(figsize=(15,8))

for i, col in enumerate(['total_bill', 'tip']):
  plt.subplot(2,3, i + 1)
  sb.distplot(df1[col])
plt.tight_layout()
plt.show()

plt.subplots(figsize=(15,8))

for i, col in enumerate(['total_bill', 'tip']):
  plt.subplot(2,3, i + 1)
  sb.boxplot(df1[col])
plt.tight_layout()
plt.show()

df1.shape, df1[(df1['total_bill']<45) & (df1['tip']<7)].shape

df1 = df1[(df1['total_bill']<45) & (df1['tip']<7)]

import matplotlib.pyplot as plt
import seaborn as sb

feat = df1.select_dtypes(include=['int', 'float']).columns

# Create subplots for countplots
plt.figure(figsize=(15, 8))
for i, col in enumerate(feat):
    if i < 8:
        plt.subplot(2, 4, i + 1)
        sb.countplot(data=df1, x=col)
        plt.title(f'Countplot of {col}')

plt.tight_layout()
plt.show()

plt.scatter(df1['total_bill'], df1['tip'])
plt.title('Total Bill v/s Total Tip')
plt.xlabel('Total Bill')
plt.ylabel('Total Tip')
plt.show()

df1.groupby(['size']).mean()

df1.groupby(['time']).mean()

df1.groupby(['day']).mean()

le = LabelEncoder()

for col in df1.columns:
  if df1[col].dtype == object:
	  df1[col] = le.fit_transform(df1[col])

df1.head()

plt.figure(figsize=(7,7))
sb.heatmap(df1.corr() > 0.7, annot = True, cbar = False)
plt.show()

sns.boxplot(a,color='Purple')
plt.show()

plt.hist(df1['total_bill'],color='orange',bins=[10,15,25,30,50],edgecolor='black',rwidth=0.5)
plt.show()

sns.violinplot(a,color='Yellow')
plt.show()

a.kurt()

a.skew()

x1=[1,2,3,4]
y1=[5,10,3,20]
x2=[10,15,12,11]
plt.plot(x1,y1,linestyle='-.',marker='^',markersize=9,color='green',label='line 1')
plt.plot(x1,x2,linestyle='--',marker='o',markersize=9,color='red',label='line 2')
plt.title('Simple Line Graph')
plt.xlabel('x axis')
plt.ylabel('y axis')
plt.legend()
plt.grid()
plt.show()

plt.scatter(df1['total_bill'],df1['tip'])
plt.show()

sns.scatterplot(x='total_bill',y='tip',data=df1,hue='day')
plt.show()

sns.scatterplot(x='total_bill',y='tip',data=df1,hue='sex')
plt.show()

sns.lmplot(x='total_bill',y='tip',data=df1,hue='sex',fit_reg=False,markers=['^','s'],palette='ocean',row='sex',col='smoker')
# col and row only for LM plot
plt.show()

sns.stripplot(x='day',y='total_bill',data=df1,jitter=False)
plt.grid()
plt.axhline(20,color='black')
plt.show()

sns.swarmplot(x='day',y='total_bill',data=df1,hue='sex')
plt.grid()
plt.axhline(20,color='black')
plt.show()

sns.heatmap(df1.corr(),annot=True)
plt.figure(figsize=(5,5))
plt.show()

sns.countplot(x='day',data=df1,hue='sex')
plt.show()

sns.countplot(x='sex',data=df1,hue='day')
plt.show()

sns.countplot(x='size',data=df1,hue='sex')
plt.show()

sns.pairplot(data=df1,hue='sex')
plt.show()

sns.boxplot(x='day',y='total_bill',data=df1)
plt.show()

sns.violinplot(y='day',x='total_bill',data=df1)
plt.show()

sns.boxplot(x='day',y='total_bill',data=df1,whis=False)
plt.show()

sns.violinplot(x='day',y='total_bill',data=df1,hue='smoker',split=True)
plt.show()

a=df1.groupby('sex').mean()['total_bill']

a.plot(kind='bar')
plt.show()

df1.groupby('day').mean()['total_bill'].plot(kind='bar')
plt.show()

x=pd.DataFrame(pd.pivot_table(df1,index=['sex','smoker'],aggfunc='count')['total_bill'])

x

x.loc['Female','Yes'].sum()/x.loc['Female'].sum()*100

x.loc['Female','No'].sum()/x.loc['Female'].sum()*100

df1['smoker'][df1['sex']=='Female'].value_counts(normalize=True)*100

df1[(df1['sex']=='Female') & (df1['smoker']=='Yes')]['sex'].value_counts()

"""- percentage of females who smoke and don't smoke of the total number of females"""

(x.loc['Female','Yes'].sum()/(x.loc['Female','Yes'].sum()+x.loc['Male','Yes'].sum()))*100

(x.loc['Male','Yes'].sum()/(x.loc['Female','Yes'].sum()+x.loc['Male','Yes'].sum()))*100

print((df1.groupby(['day','smoker']).count()['total_bill']['Thur','Yes']/df1.groupby(['day','smoker']).count()['total_bill']['Thur'].sum())*100)

print((df1.groupby(['day','smoker']).count()['total_bill']['Fri','Yes']/df1.groupby(['day','smoker']).count()['total_bill']['Fri'].sum())*100)

print((df1.groupby(['day','smoker']).count()['total_bill']['Sat','Yes']/df1.groupby(['day','smoker']).count()['total_bill']['Sat'].sum())*100)
print((df1.groupby(['day','smoker']).count()['total_bill']['Sun','Yes']/df1.groupby(['day','smoker']).count()['total_bill']['Sun'].sum())*100)

print((df1.groupby(['day','smoker']).count()['total_bill']['Thur','No']/df1.groupby(['day','smoker']).count()['total_bill']['Thur'].sum())*100)
print((df1.groupby(['day','smoker']).count()['total_bill']['Fri','No']/df1.groupby(['day','smoker']).count()['total_bill']['Fri'].sum())*100)
print((df1.groupby(['day','smoker']).count()['total_bill']['Sat','No']/df1.groupby(['day','smoker']).count()['total_bill']['Sat'].sum())*100)
print((df1.groupby(['day','smoker']).count()['total_bill']['Sun','No']/df1.groupby(['day','smoker']).count()['total_bill']['Sun'].sum())*100)

(df1.groupby(['day','smoker']).count()['total_bill']/df1.groupby(['day']).count()['total_bill'])*100

df1['sex LE']=df1['sex'].replace({'Male':0,'Female':1})#replace returns numerical value as int type
df1['sex LE map']=df1['sex'].map({'Male':0,'Female':1})# map returns numeric values as category type
df1.head()

df1['sex LE map']=df1['sex LE map'].astype(np.int64)

df1.info()

from sklearn.preprocessing import LabelEncoder

lr=LabelEncoder()

df1['LE Day']=lr.fit_transform(df1['day'])

df1.head()

"""Outlier treatment"""

plt.figure(figsize=(10,5))
plt.subplot(2,2,1)
df1['sex'].value_counts().plot(kind='bar')
plt.subplot(2,2,2)
df1['sex'].value_counts().plot(kind='pie')
plt.show()

fig, axes=plt.subplots(1,2,figsize=(15,5))
df1['sex'].value_counts().plot(kind='bar',ax=axes[1])
df1['sex'].value_counts().plot(kind='pie',ax=axes[0])
plt.show()

df1['zscore']=(df1['total_bill']-df1['total_bill'].mean())/df1['total_bill'].std()

df2=df1[(df1['zscore']>3) | (df1['zscore']<-3) ]
df2

df3=df1[(df1['zscore']<3) & (df1['zscore']>-3)]
df3

df2['total_bill'].count()

plt.subplot(2,2,1)
df1['total_bill'].plot(kind='kde')
plt.subplot(2,2,2)
df3['total_bill'].plot(kind='kde')
plt.show()

print(df1['total_bill'].skew())
print(df3['total_bill'].skew())

print(df1['total_bill'].kurt())
print(df3['total_bill'].kurt())

q1=df1['total_bill'].quantile(0.25)
q2=df1['total_bill'].quantile(0.5)
q3=df1['total_bill'].quantile(0.75)

IQR=q3-q1
IQR

UL=q3+(IQR)*(3/2)
UL

LL=q1-(IQR)*(3/2)
LL

df_out=df1[(df1['total_bill']>UL) | (df1['total_bill']<LL)]
df_out['total_bill'].count()

df_clean=df1[(df1['total_bill']<=UL) & (df1['total_bill']>=LL)]
df_clean.head()

plt.figure(figsize=(15,10))
plt.subplot(3,3,1)
df1['total_bill'].plot(kind='kde')
plt.subplot(3,3,2)
df3['total_bill'].plot(kind='kde')
plt.subplot(3,3,3)
df_clean['total_bill'].plot(kind='kde')
plt.show()

print('skew for all data is',df1['total_bill'].skew())
print('skew for all clean data with zscore is',df3['total_bill'].skew())
print('skew for clean data is',df_clean['total_bill'].skew())

print('kurtosis for all data is',df1['total_bill'].kurt())
print('kurtosis for all clean data with zscore is',df3['total_bill'].kurt())
print('kurtosis for clean data is',df_clean['total_bill'].kurt())

print('Upper limit is',UL)
print('Lower limit is',LL)
print('IQR is',IQR)

df_mm=(df1['total_bill']-df1['total_bill'].max())/(df1['total_bill'].max()-df1['total_bill'].min())
df_mm

plt.figure(figsize=(15,10))
plt.subplot(3,3,1)
df1['total_bill'].plot(kind='kde')
plt.subplot(3,3,2)
df3['total_bill'].plot(kind='kde')
plt.subplot(3,3,3)
df_mm.plot(kind='kde')
plt.show()

print('min max',df_mm.skew())

print('kurtosis for all data is',df1['total_bill'].kurt())
print('kurtosis for all clean data with zscore is',df3['total_bill'].kurt())
print('kurtosis for all clean data with minmax is',df_mm.kurt())

df3['total_bill'].skew()

df1['sqrt']=(df1['total_bill'])**(1/2)
df1['log']=np.log(df1['total_bill'])

df1

plt.figure(figsize=(15,10))
plt.subplot(3,3,1)
df1['total_bill'].plot(kind='kde')
plt.xlabel('original')
plt.subplot(3,3,2)
df1['sqrt'].plot(kind='kde')
plt.xlabel('square root')
plt.subplot(3,3,3)
df1['log'].plot(kind='kde')
plt.xlabel('log')
plt.show()

print('skewness of original data',df1['total_bill'].skew())
print('skewness of root transform data',df1['sqrt'].skew())
print('skewness of log transform data',df1['log'].skew())

from sklearn.model_selection import train_test_split

x=df1.drop(['total_bill'],axis=1)
y=df1['total_bill']

x_train,x_test,y_train,y_test=train_test_split(x,y,train_size=0.7,random_state=0)

pd.crosstab(df1['sex'],df1['day'])

pd.crosstab(df1['sex'],df1['day']).plot(kind='bar')
plt.show()
pd.crosstab(df1['sex'],df1['day']).plot(kind='bar',stacked=True)
plt.show()

features = df1.drop('tip', axis=1)
target = df1['tip']

X_train, X_val, Y_train, Y_val = train_test_split(features, target, test_size=0.2, random_state=22)
X_train.shape, X_val.shape

scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_val = scaler.transform(X_val)

models = [LinearRegression(), XGBRegressor(), RandomForestRegressor(), AdaBoostRegressor()]

for i in range(4):
  models[i].fit(X_train, Y_train)

  print(f'{models[i]} : ')
  pred_train = models[i].predict(X_train)
  print('Training Accuracy : ', mae(Y_train, pred_train))

  pred_val = models[i].predict(X_val)
  print('Validation Accuracy : ', mae(Y_val, pred_val))
  print()

"""Out of all the models RandomForestModel is giving the least value for the mean absolute error this means predictions made by this model are close to the real values as compared to the other model.

Conclusion
The dataset we have used here was small still the conclusion we drew from them were quite similar to what is observed in the real-life scenario. If we would have a bigger dataset then we will be able to learn even deeper patterns in the relation between the independent features and the tip given to the waiters.

"""

